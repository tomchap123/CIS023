//Project:	CIS023_Fall2018_Lab1-9b Tom Chaparas
//Module:	CIS023_Fall2018_Lab1-9b Tom Chaparas.cpp 
//Author:	Tom Chaparas
//Date:		August 22, 2018
//Purpose:	Learn the steps necessary to create a working listbox.
//			Add text items to a listbox.
//			Review file I / O.

#include "stdafx.h"
#include "CIS023_Fall2018_Lab1-9b Tom Chaparas.h"

#define MAX_LOADSTRING 100

// Global Variables:
HINSTANCE hInst;                                // current instance
WCHAR szTitle[MAX_LOADSTRING];                  // The title bar text
WCHAR szWindowClass[MAX_LOADSTRING];            // the main window class name

HWND hWnd_ListBox;								//Handle for ListBox
HWND hWnd_Load;									//Handle for Load button
HWND hWnd_CBObox;								//combo box control


// Forward declarations of functions included in this code module:
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);

void LoadListBox();					//read file, load listbox

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    // TODO: Place code here.

    // Initialize global strings
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_CIS023_FALL2018_LAB19BTOMCHAPARAS, szWindowClass, MAX_LOADSTRING);
    MyRegisterClass(hInstance);

    // Perform application initialization:
    if (!InitInstance (hInstance, nCmdShow))
    {
        return FALSE;
    }

    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_CIS023_FALL2018_LAB19BTOMCHAPARAS));

    MSG msg;

    // Main message loop:
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    return (int) msg.wParam;
}



//
//  FUNCTION: MyRegisterClass()
//
//  PURPOSE: Registers the window class.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style          = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc    = WndProc;
    wcex.cbClsExtra     = 0;
    wcex.cbWndExtra     = 0;
    wcex.hInstance      = hInstance;
    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_CIS023_FALL2018_LAB19BTOMCHAPARAS));
    wcex.hCursor        = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW+0);
    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_CIS023_FALL2018_LAB19BTOMCHAPARAS);
    wcex.lpszClassName  = szWindowClass;
    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

    return RegisterClassExW(&wcex);
}

//
//   FUNCTION: InitInstance(HINSTANCE, int)
//
//   PURPOSE: Saves instance handle and creates main window
//
//   COMMENTS:
//
//        In this function, we save the instance handle in a global variable and
//        create and display the main program window.
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   hInst = hInstance; // Store instance handle in our global variable

   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, 200, 300, nullptr, nullptr, hInstance, nullptr);

   if (!hWnd)
   {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   return TRUE;
}

//
//  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  PURPOSE:  Processes messages for the main window.
//
//  WM_COMMAND  - process the application menu
//  WM_PAINT    - Paint the main window
//  WM_DESTROY  - post a quit message and return
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
	switch (message)
	{

	case WM_COMMAND:
	{
		int wmId = LOWORD(wParam);
		// Parse the menu selections:
		switch (wmId)
		{
		case BN_CLICKED:
		{
			if (LOWORD(lParam) == (WORD)hWnd_Load)
			{
				LoadListBox();
			}
		}
		break;

		case IDM_ABOUT:
			DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
			break;
		case IDM_EXIT:
			DestroyWindow(hWnd);
			break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
		}
	}
	break;
	case WM_PAINT:
	{
		PAINTSTRUCT ps;
		HDC hdc = BeginPaint(hWnd, &ps);
		// TODO: Add any drawing code that uses hdc here...
		EndPaint(hWnd, &ps);
	}
	break;

		case WM_CREATE:
		{
			//"Load" button
			hWnd_Load = CreateWindow(				//Global variable catching button push event
				TEXT("BUTTON"),  //Type of control
				TEXT("LOAD"),	//Text in label
				WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,
				50, 180, 90, 30,	//Location by trial and
				hWnd, NULL, NULL, NULL);

			//Listbox
			/*hWnd_ListBox = CreateWindow(			//Create a window(control)
				TEXT("LISTBOX"),					//Type of control
				NULL,								//Title text (NULL means not used)
				WS_VISIBLE | WS_CHILD |				//Visible, child window of main window
				WS_BORDER | WS_VSCROLL,				//border = box, vscroll = thumbnail
				20, 20, 150, 140,					//location x, y, size x, y
				hWnd, NULL, NULL, NULL);			//owner window, last 3 not used*/

			//combo box
			hWnd_CBObox = CreateWindow(					//Create a window(control)
				TEXT("COMBOBOX"),					//Type of control
				TEXT(""),							//Pre-selected text/Title text (NULL means not used)
				WS_VISIBLE | WS_CHILD |				//Visible, child window of main window
				CBS_DROPDOWN |						//uses the standard listbox dropdown
				WS_OVERLAPPED |						//can overlap other controls
				CBS_HASSTRINGS |					//edit and listbox contain string (TCHAR)
				WS_VSCROLL,							//vertical scroll i listbox
				20, 20, 150, 140,					//location x, y, size x, y
				hWnd, NULL, NULL, NULL);			//owner window, last 3 not used
		}
		break;

		case WM_DESTROY:

			PostQuitMessage(0);
			break;
		default:
			return DefWindowProc(hWnd, message, wParam, lParam);
		}
		return 0;
	


	
	
}
// Message handler for about box.
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
	UNREFERENCED_PARAMETER(lParam);
	switch (message)
	{
	case WM_INITDIALOG:
		return (INT_PTR)TRUE;

	case WM_COMMAND:
		if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
		{
			EndDialog(hDlg, LOWORD(wParam));
			return (INT_PTR)TRUE;
		}
		break;
	}
	return (INT_PTR)FALSE;
}

void LoadListBox()
{
	ifstream fInput;			//file handle for input file
	string strLine;				//
	TCHAR szOutput[100];		//output to listbox
	size_t pReturnValue;		//return value for mbstowcs_s()

	fInput.open("data.txt");	//open text file


	if (fInput.is_open())		//did file open okay?
	{
		getline(fInput, strLine);		//read first line in file

		while (fInput.good())			//continue reading to end of file
		{
			mbstowcs_s(					//converts string to TCHAR
				&pReturnValue,			//address of return value
				szOutput,				//output TCHAR
				100,					//size of TCHAR
				strLine.c_str(),		//source string
				100);					//max chars to convert

			/*SendMessage(				//send a message to control
				hWnd_ListBox,			//control handle
				LB_ADDSTRING,			//message: add a string
				NULL,					//wParam not used
				LPARAM(szOutput));		//TCHAR to load*/

			SendMessage(				//send a message to control
				hWnd_CBObox,			//control handle
				CB_ADDSTRING,			//message: add a string
				NULL,					//wParam not used
				LPARAM(szOutput));		//TCHAR to load

			getline(fInput, strLine);	//read last line in file	
		}
		fInput.close();

	}

}
