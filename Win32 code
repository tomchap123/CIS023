//Project:	CIS023_Fall2018_HW1-9 Tom Chaparas
//Module:	CIS023_Fall2018_HW1-9 Tom Chaparas.cpp 
//Author:	Tom Chaparas	
//Date:		August 26, 2018
//Purpose:	Review reading data from a file.
//			Review the use of arrays.
//			Review the use of list boxes in Win32.

#include "stdafx.h"
#include "CIS023_Fall2018_HW1-9 Tom Chaparas.h"

#define MAX_LOADSTRING 100

// Global Variables:
HINSTANCE hInst;                                // current instance
WCHAR szTitle[MAX_LOADSTRING];                  // The title bar text
WCHAR szWindowClass[MAX_LOADSTRING];            // the main window class name

HWND hWnd_Load;									//handles to controls
HWND hWnd_CBObox_Male;
HWND hWnd_CBObox_Male_Number;
HWND hWnd_CBObox_Female;
HWND hWnd_CBObox_Female_Number;
HWND hWnd_PushButton_Male;							
HWND hWnd_PushButton_Male_Number;
HWND hWnd_PushButton_Female;
HWND hWnd_PushButton_Female_Number;


HWND hWnd_Input;
HWND hWnd_Output;

// Forward declarations of functions included in this code module:
ATOM                MyRegisterClass(HINSTANCE hInstance);
BOOL                InitInstance(HINSTANCE, int);
LRESULT CALLBACK    WndProc(HWND, UINT, WPARAM, LPARAM);
INT_PTR CALLBACK    About(HWND, UINT, WPARAM, LPARAM);

void LoadComboBox();					//read file, load listbox

int APIENTRY wWinMain(_In_ HINSTANCE hInstance,
                     _In_opt_ HINSTANCE hPrevInstance,
                     _In_ LPWSTR    lpCmdLine,
                     _In_ int       nCmdShow)
{
    UNREFERENCED_PARAMETER(hPrevInstance);
    UNREFERENCED_PARAMETER(lpCmdLine);

    // TODO: Place code here.

    // Initialize global strings
    LoadStringW(hInstance, IDS_APP_TITLE, szTitle, MAX_LOADSTRING);
    LoadStringW(hInstance, IDC_CIS023_FALL2018_HW19TOMCHAPARAS, szWindowClass, MAX_LOADSTRING);
    MyRegisterClass(hInstance);

    // Perform application initialization:
    if (!InitInstance (hInstance, nCmdShow))
    {
        return FALSE;
    }

    HACCEL hAccelTable = LoadAccelerators(hInstance, MAKEINTRESOURCE(IDC_CIS023_FALL2018_HW19TOMCHAPARAS));

    MSG msg;

    // Main message loop:
    while (GetMessage(&msg, nullptr, 0, 0))
    {
        if (!TranslateAccelerator(msg.hwnd, hAccelTable, &msg))
        {
            TranslateMessage(&msg);
            DispatchMessage(&msg);
        }
    }

    return (int) msg.wParam;
}



//
//  FUNCTION: MyRegisterClass()
//
//  PURPOSE: Registers the window class.
//
ATOM MyRegisterClass(HINSTANCE hInstance)
{
    WNDCLASSEXW wcex;

    wcex.cbSize = sizeof(WNDCLASSEX);

    wcex.style          = CS_HREDRAW | CS_VREDRAW;
    wcex.lpfnWndProc    = WndProc;
    wcex.cbClsExtra     = 0;
    wcex.cbWndExtra     = 0;
    wcex.hInstance      = hInstance;
    wcex.hIcon          = LoadIcon(hInstance, MAKEINTRESOURCE(IDI_CIS023_FALL2018_HW19TOMCHAPARAS));
    wcex.hCursor        = LoadCursor(nullptr, IDC_ARROW);
    wcex.hbrBackground  = (HBRUSH)(COLOR_WINDOW + 0);  //Grey Window background
    wcex.lpszMenuName   = MAKEINTRESOURCEW(IDC_CIS023_FALL2018_HW19TOMCHAPARAS);
    wcex.lpszClassName  = szWindowClass;
    wcex.hIconSm        = LoadIcon(wcex.hInstance, MAKEINTRESOURCE(IDI_SMALL));

    return RegisterClassExW(&wcex);
}

//
//   FUNCTION: InitInstance(HINSTANCE, int)
//
//   PURPOSE: Saves instance handle and creates main window
//
//   COMMENTS:
//
//        In this function, we save the instance handle in a global variable and
//        create and display the main program window.
//
BOOL InitInstance(HINSTANCE hInstance, int nCmdShow)
{
   hInst = hInstance; // Store instance handle in our global variable

   //Default Parent Window size
   HWND hWnd = CreateWindowW(szWindowClass, szTitle, WS_OVERLAPPEDWINDOW,
      CW_USEDEFAULT, 0, 600, 300, nullptr, nullptr, hInstance, nullptr);

   if (!hWnd)
   {
      return FALSE;
   }

   ShowWindow(hWnd, nCmdShow);
   UpdateWindow(hWnd);

   return TRUE;
}

//
//  FUNCTION: WndProc(HWND, UINT, WPARAM, LPARAM)
//
//  PURPOSE:  Processes messages for the main window.
//
//  WM_COMMAND  - process the application menu
//  WM_PAINT    - Paint the main window
//  WM_DESTROY  - post a quit message and return
//
//
LRESULT CALLBACK WndProc(HWND hWnd, UINT message, WPARAM wParam, LPARAM lParam)
{
    switch (message)
    {
    case WM_COMMAND:
        {
            int wmId = LOWORD(wParam);
            // Parse the menu selections:
            switch (wmId)
            {
            case IDM_ABOUT:
                DialogBox(hInst, MAKEINTRESOURCE(IDD_ABOUTBOX), hWnd, About);
                break;
            case IDM_EXIT:
                DestroyWindow(hWnd);
                break;
            default:
                return DefWindowProc(hWnd, message, wParam, lParam);
            }
        }
        break;

	case BN_CLICKED:
	{
		if (LOWORD(lParam) == (WORD)hWnd_Load)
		{
			LoadComboBox();
		}
	}
	break;
    case WM_PAINT:
        {
            PAINTSTRUCT ps;
            HDC hdc = BeginPaint(hWnd, &ps);
            // TODO: Add any drawing code that uses hdc here...
            EndPaint(hWnd, &ps);
        }
        break;

	case WM_CREATE:						//window controls on startup
	{
		CreateWindow(								//Text Label
			TEXT("STATIC"),
			TEXT("TOP 100 NAMES"),
			WS_VISIBLE | WS_CHILD,
			0, 10, 400, 350,
			hWnd, NULL, NULL, NULL);

		hWnd_Output = CreateWindow(					//Combo Box Label
			TEXT("STATIC"),
			TEXT("Male Name"),
			WS_VISIBLE | WS_CHILD,
			10, 40, 100, 30,
			hWnd, NULL, NULL, NULL);

		hWnd_Output = CreateWindow(					//Combo Box Label
			TEXT("STATIC"),
			TEXT("Number"),
			WS_VISIBLE | WS_CHILD,
			120, 40, 200, 30,
			hWnd, NULL, NULL, NULL);

		hWnd_Output = CreateWindow(					//Combo Box Label
			TEXT("STATIC"),
			TEXT("Female Name"),
			WS_VISIBLE | WS_CHILD,
			230, 40, 320, 30,
			hWnd, NULL, NULL, NULL);

		hWnd_Output = CreateWindow(					//Combo Box Label
			TEXT("STATIC"),
			TEXT("Number"),
			WS_VISIBLE | WS_CHILD,
			340, 40, 420, 30,
			hWnd, NULL, NULL, NULL);

		hWnd_PushButton_Male = CreateWindow(		//Button control
			TEXT("BUTTON"),
			TEXT("LOAD"),
			WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,
			10, 160, 100, 40,
			hWnd, NULL, NULL, NULL);

		hWnd_PushButton_Male_Number = CreateWindow(		//Button control
			TEXT("BUTTON"),
			TEXT("LOAD"),
			WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,
			120, 160, 100, 40,
			hWnd, NULL, NULL, NULL);

		hWnd_PushButton_Female = CreateWindow(		//Button control
			TEXT("BUTTON"),
			TEXT("LOAD"),
			WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,
			230, 160, 100, 40,
			hWnd, NULL, NULL, NULL);

		hWnd_PushButton_Female_Number = CreateWindow(		//Button control
			TEXT("BUTTON"),
			TEXT("LOAD"),
			WS_VISIBLE | WS_CHILD | BS_DEFPUSHBUTTON,
			340, 160, 100, 40,
			hWnd, NULL, NULL, NULL);

		//combo box
		hWnd_CBObox_Male = CreateWindow(			//Create a window(control)
			TEXT("COMBOBOX"),						//Type of control
			TEXT(""),								//Pre-selected text/Title text (NULL means not used)
			WS_VISIBLE | WS_CHILD |					//Visible, child window of main window
			CBS_DROPDOWN |							//uses the standard listbox dropdown
			WS_OVERLAPPED |							//can overlap other controls
			CBS_HASSTRINGS |						//edit and listbox contain string (TCHAR)
			WS_VSCROLL,								//vertical scroll i listbox
			10, 60, 100, 100,						//location x, y, size x, y
			hWnd, NULL, NULL, NULL);				//owner window, last 3 not used
		
		//combo box
		hWnd_CBObox_Male_Number = CreateWindow(		//Create a window(control)
			TEXT("COMBOBOX"),						//Type of control
			TEXT(""),								//Pre-selected text/Title text (NULL means not used)
			WS_VISIBLE | WS_CHILD |					//Visible, child window of main window
			CBS_DROPDOWN |							//uses the standard listbox dropdown
			WS_OVERLAPPED |							//can overlap other controls
			CBS_HASSTRINGS |						//edit and listbox contain string (TCHAR)
			WS_VSCROLL,								//vertical scroll i listbox
			120, 60, 100, 100,						//location x, y, size x, y
			hWnd, NULL, NULL, NULL);				//owner window, last 3 not used

		//combo box
		hWnd_CBObox_Female = CreateWindow(			//Create a window(control)
			TEXT("COMBOBOX"),							//Type of control
			TEXT(""),								//Pre-selected text/Title text (NULL means not used)
			WS_VISIBLE | WS_CHILD |					//Visible, child window of main window
			CBS_DROPDOWN |							//uses the standard listbox dropdown
			WS_OVERLAPPED |							//can overlap other controls
			CBS_HASSTRINGS |						//edit and listbox contain string (TCHAR)
			WS_VSCROLL,								//vertical scroll i listbox
			230, 60, 100, 100,						//location x, y, size x, y
			hWnd, NULL, NULL, NULL);				//owner window, last 3 not used

		//combo box
		hWnd_CBObox_Female_Number = CreateWindow(	//Create a window(control)
			TEXT("COMBOBOX"),						//Type of control
			TEXT(""),								//Pre-selected text/Title text (NULL means not used)
			WS_VISIBLE | WS_CHILD |					//Visible, child window of main window
			CBS_DROPDOWN |							//uses the standard listbox dropdown
			WS_OVERLAPPED |							//can overlap other controls
			CBS_HASSTRINGS |						//edit and listbox contain string (TCHAR)
			WS_VSCROLL,								//vertical scroll i listbox
			340, 60, 100, 100,						//location x, y, size x, y
			hWnd, NULL, NULL, NULL);				//owner window, last 3 not used

	}
	break;
    case WM_DESTROY:
        PostQuitMessage(0);
        break;
    default:
        return DefWindowProc(hWnd, message, wParam, lParam);
    }
    return 0;
}

// Message handler for about box.
INT_PTR CALLBACK About(HWND hDlg, UINT message, WPARAM wParam, LPARAM lParam)
{
    UNREFERENCED_PARAMETER(lParam);
    switch (message)
    {
    case WM_INITDIALOG:
        return (INT_PTR)TRUE;

    case WM_COMMAND:
        if (LOWORD(wParam) == IDOK || LOWORD(wParam) == IDCANCEL)
        {
            EndDialog(hDlg, LOWORD(wParam));
            return (INT_PTR)TRUE;
        }
        break;
    }
    return (INT_PTR)FALSE;
}
void LoadComboBox()
{
	
		ifstream fInput;					//file handle for input file
		string strLine;						//string variable to store data from file
		TCHAR szOutputMale[100];			//output to Combobox
		size_t pReturnValue;				//return value for mbstowcs_s()

		fInput.open("textdata.txt");			//open text file

		if (fInput.is_open())					//did file open okay?
		{
			getline(fInput, strLine);			//read first line in file
				
			while (fInput.good())				//continue reading to end of file
			{
				mbstowcs_s(						//converts string to TCHAR
					&pReturnValue,				//address of return value
					szOutputMale,				//output TCHAR
					100,						//size of TCHAR
					strLine.c_str(),			//source string
					100);						//max chars to convert

				SendMessage(					//send a message to control
					hWnd_CBObox_Male,			//control handle
					CB_ADDSTRING,				//message: add a string
					NULL,						//wParam not used
					LPARAM(szOutputMale));		//TCHAR to load
				
				getline(fInput, strLine);		//read last line in file	
			}
		fInput.close();
		}
			
}

//TCHAR szOutputMaleNumber[100];	//output to Combobox
//TCHAR szOutputFemale[100];		//output to Combobox
//TCHAR szOutputFemaleNumber[100];	//output to Combobox

/*SendMessage(						//send a message to control
hWnd_CBObox_Male_Number,		//control handle
CB_ADDSTRING,					//message: add a string
NULL,							//wParam not used
LPARAM(szOutputMaleNumber));	//TCHAR to load

SendMessage(						//send a message to control
hWnd_CBObox_Female,				//control handle
CB_ADDSTRING,					//message: add a string
NULL,							//wParam not used
LPARAM(szOutputFemale));		//TCHAR to load

SendMessage(						//send a message to control
hWnd_CBObox_Female_Number,		//control handle
CB_ADDSTRING,					//message: add a string
NULL,							//wParam not used
LPARAM(szOutputFemaleNumber));	//TCHAR to load*/
